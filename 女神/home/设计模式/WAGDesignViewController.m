//
//  WAGDesignViewController.m
//  女神
//
//  Created by wangaiguo on 2018/12/26.
//  Copyright © 2018 王爱国. All rights reserved.
//

#import "WAGDesignViewController.h"

@interface WAGDesignViewController ()

@end

@implementation WAGDesignViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    UITextView *textView = [[UITextView alloc]initWithFrame:self.view.frame];
    textView.text = [self content];
    textView.font = [UIFont systemFontOfSize:15];
    textView.backgroundColor = [UIColor cyanColor];
    [self.view addSubview:textView];
    [self setTitle:@"设计模式简介"];
}

- (NSString *)content{
    NSString *content = @"终结者，组合，访问者，代理，备忘录，命令，观察者\n针对接口编程，而不是针对实现编程\n\n1、对象创建\n原型模式：使用原型实例指定创建对象的种类，并通过复制这个原型创建新的对象。\n工厂方法模式：定义创建对象的接口，让子类决定实例化哪一个类。工厂方法使得一个类的实例化延迟到其子类。\n抽象工厂：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n生成器模式：将一个复杂对象的构建与它的表现分离，使得同样的构建过程可以创建不同的表现。\n软件设计的黄金法则：变动需要抽象。\n单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。只要应用程序需要用集中式的类来协调其服务，这个类就应生成单一的实例，而不是多个实例。\n\n2、接口适配\n适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n桥接模式：将抽象部分与它的实现部分分离，使它们可以独立变化。（把抽象分离出来而又要他们联系在一起 ， 一般优先使用对象组合而不是继承）。\n外观模式：为系统中的一组接口提供一个统一的接口。外观定义一个高层接口，让子系统更易于使用。\n\n3、对象去耦\n中介者模式：用一个对象来封装一系列对象的交互方式。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\n\n4、抽象集合\n组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性。\n迭代器：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。\n\n5、行为扩展\n访问者模式：表示一个作用于某对象结构中的各元素的操作。它让我们可以再不改变各元素的类的前提下定义作用于这些元素的新操作。\n装饰模式：动态地给一个对象添加一些额外的职责。就扩展功能来说，装饰模式相比生成子类更为灵活。\n责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间发生耦合。此模式将这些对象连成一条链，并沿着这条链传递请求，知道有个对象处理它为止。\n\n6、算法封装\n模板方法：定义一个操作中算法的骨架，而将一些步骤延迟到子类中。模板方法使子类可以重定义算法的某些特定步骤而不改变该算法的结构。\n策略模式：定义一系列算法，把它们一个个封装起来，并且它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\n命令模式：将请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队记录请求日志，以及支持可撤销的操作。\n\n7、性能与对象访问\n享元模式：运用共享技术有效地支持大量细粒度的对象。\n代理模式：为其他对象提供一种代理以控制对这个对象的访问。\n\n8、对象状态\n备忘录模式：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。";
    return content;
}

@end
